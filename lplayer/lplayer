#!/bin/bash
#
# lplayer - gapless loop player (using mplayer)
#   inspired by http://forum.gmusicbrowser.org/index.php?topic=100.0
#
# https://github.com/macie/linux-shell-scripts
#
# Copyright (c) 2011-2014 Maciej Żok <maciek.zok@gmail.com>
# MIT License (http://opensource.org/licenses/MIT)


#
#  DEFAULTS
#

readonly _VERSION_='1.2-dev'

readonly _PLAYER=mplayer

_FILENAME=''
_QUEUE_FILE=/tmp/lplayerqueue
_CHANNELS='2'
_SAMPLERATE='48000'
_PLAYER_OPTIONS="-nocache -nolirc -vc null -vo null -loop 0
                 -af resample=${_SAMPLERATE}
                 -ao pcm:nowaveheader:file=${_QUEUE_FILE}"


#
#  MESSAGES
#

help_message () { 
  #
  # Shows help message.
  #
  # Globals:
  #     None.
  #
  # Arguments:
  #     None.
  #
  # Returns:
  #     String message to standard output
  #
  echo 'lplayer - gapless loop player (using mplayer).'
  echo 'Usage:'
  echo '  lplayer [options] filename'
  echo 
  echo 'Options:'
  echo '  -p, --playlist <filename>        use specified player'
  echo '  -o, --player-options <options>   set player options'
  echo '      --channels <number>          set number of channels'
  echo '      --samplerate <number>        set samplerate'
  echo '  -h, --help                       show this help'
  echo '  -V, --version                    show version number'
}

version_message() {
  #
  # Shows version message.
  #
  # Globals:
  #     _VERSION_ (str) -Version number.
  #
  # Arguments:
  #     None.
  #
  # Returns:
  #     String message to standard output
  #
  echo "lplayer ${_VERSION_}"
  echo
  echo 'Copyright (c) 2014 Maciej Żok'
  echo 'MIT License (http://opensource.org/licenses/MIT)'
}

error_message() {
  #
  # Shows error message.
  #
  # Globals:
  #     None.
  #
  # Arguments:
  #     msg (str) - Error message.
  #
  # Returns:
  #     String message to err output.
  #
  local msg
  local "$@"

  echo "Error: ${msg}." 1>&2
}


#
#  FUNCTIONS
#

parse_args() {
  #
  # Parses script parameters.
  #
  # Globals:
  #     _CHANNELS (str) - Number of channels.
  #     _FILENAME (str) - Name of music file.
  #     _PLAYER_OPTIONS (str) - Music player command options.
  #     _SAMPLERATE (str) - Sample rate.
  #
  # Arguments:
  #     Script params.
  #
  # Returns:
  #     String message or nothing.
  #
  if [[ $# -eq 0 ]]; then
    error_message msg='no audio file'
    exit 1
  else
    while [[ $1 == -* ]]; do
      case "$1" in
        -h|--help|-\?)
          help_message
          exit 0
          ;;

        -V|--version|-\?)
          version_message
          exit 0
          ;;

        -p|--playlist)
          _PLAYER_OPTIONS="${_PLAYER_OPTIONS} -playlist"
          shift 2
          ;;

        -o|--player-options) 
          if [[ $# > 1 ]]; then
            _PLAYER_OPTIONS="${_PLAYER_OPTIONS} $2"
            shift 2
          else
            error_message msg='no player options specified'
            exit 1
          fi
          ;;

        --channels)
          _CHANNELS="$2"
          shift 2
          ;;

        --samplerate)
          _SAMPLERATE="$2"
          shift 2
          ;;

        -*)
          error_message msg="invalid option: $1"
          help_message
          exit 1
          ;;
      esac
    done

    _FILENAME="${@: -1}"  # filename is last argument
  fi
}

make_queue() {
  #
  # Creates new queue.
  #
  # Globals:
  #     _QUEUE_FILE (str) - Name of queue file.
  #
  # Arguments:
  #     None.
  #
  # Returns:
  #     None.
  #
  [[ -e ${_QUEUE_FILE} ]] && rm ${_QUEUE_FILE}
  mkfifo ${_QUEUE_FILE}
}

play() {
  #
  # Plays file in loop.
  #
  # Globals:
  #     _CHANNELS (str) - Number of channels.
  #     _FILENAME (str) - Name of music file.
  #     _PLAYER (str) - Music player command.
  #     _PLAYER_OPTIONS (str) - Music player command options.
  #     _QUEUE_FILE (str) - Name of queue file.
  #     _SAMPLERATE (str) - Sample rate.
  #
  # Arguments:
  #     None.
  #
  # Returns:
  #     String message or nothing.
  #
  aplay -t raw -c ${_CHANNELS} -f S16_LE -r ${_SAMPLERATE} ${_QUEUE_FILE} \
    &> ${_QUEUE_FILE}.log &

  echo 'Press <q> to exit, <space> to pause/play'

  ${_PLAYER} ${_PLAYER_OPTIONS} ${_FILENAME} >/dev/null 2>&1
}


#
#  MAIN ROUTINE
#

main() {
  #
  # Main program subroutine.
  #
  parse_args "$@"
  make_queue
  play

  exit 0
}

main "$@"

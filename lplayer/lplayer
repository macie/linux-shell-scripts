#!/bin/bash
#
# lplayer - gapless loop player (using mplayer)
#   inspired by http://forum.gmusicbrowser.org/index.php?topic=100.0
#
# https://github.com/macie/linux-shell-scripts
#
# Copyright (c) 2011-2014 Maciej Żok <maciek.zok@gmail.com>
# MIT License (http://opensource.org/licenses/MIT)


#
#  DEFAULTS
#

VERSION="1.1"
QUEUE_FILE=/tmp/lplayerqueue
CHANNELS="2"
SAMPLERATE="48000"
PLAYER=mplayer
PLAYER_OPTIONS="-nocache -nolirc -vc null -vo null -loop 0 \
-af resample=${SAMPLERATE} -ao pcm:nowaveheader:file=${QUEUE_FILE}"


#
#  MESSAGES
#

help_message () { 
	#
	# Shows help message.
	#
	# Returns:
	#     String message to standard output
	#
	echo "lplayer - gapless loop player (using mplayer)."
	echo "Usage:"
	echo "  lplayer [options] filename"
	echo 
	echo "Options:"
	echo "  -p, --playlist <filename>        use specified player"
	echo "  -o, --player-options <options>   set player options"
	echo "      --channels <number>          set number of channels"
	echo "      --samplerate <number>        set samplerate"
	echo "  -h, --help                       show this help"
	echo "  -v, --version                    show version number"
}

version_message() {
	#
	# Shows version message.
	#
	# Args:
	#     version (str) - Version number.
	#
	# Returns:
	#     String message to standard output
	#
	local version
	local "${@}"

	echo "lplayer "${version};
	echo
	echo "Copyright (c) 2013 Maciej Żok"
	echo "MIT License (http://opensource.org/licenses/MIT)"
}

error_message() {
	#
	# Shows error message.
	#
	# Args:
	#     msg (str) - Error message.
	#
	# Returns:
	#     String message to err output.
	#
	local msg
	local "${@}"

	echo "Error: "${msg}"." 1>&2
}


#
#  FUNCTIONS
#

parse_args() {
	#
	# Parses script parameters.
	#
	# Args:
	#     params (str) - Script params.
	#
	# Returns:
	#     String message or nothing.
	#
	if [[ $# -eq 0 ]]; then
		error_message msg="no audio file"
		exit 1
	else
		while [[ $1 == -* ]]; do
			case "$1" in
				-h|--help|-\?)
					help_message
					exit 0;;

				-v|--version|-\?)
					version_message version=${VERSION}
					exit 0;;

				-p|--playlist)
					PLAYER_OPTIONS="${PLAYER_OPTIONS} -playlist"
					shift 2;;

				-o|--player-options) 
					if [[ $# -gt 1 ]]; then
						OPTIONS=${PLAYER_OPTIONS} $2
						shift 2
					else
						error_message msg="no player options specified"
						exit 1
					fi;;

				--channels)
					CHANNELS=$2
					shift 2;;

				--samplerate)
					SAMPLERATE=$2
					shift 2;;

				-*)
					error_message msg="invalid option: ${1}"
					help_message
					exit 1;;
			esac
		done
	fi
}

make_queue() {
	#
	# Creates new queue.
	#
	# Args:
	#     queue (str) - Queue file name.
	#
	local queue
	local "${@}"

	[[ -e ${queue} ]] && rm ${queue}
	mkfifo ${queue}
}

play() {
	#
	# Plays file in loop.
	#
	# Args:
	#     file (str) - s.
	#
	# Returns:
	#     String message or nothing.
	#
	local file
	local "${@}"

	aplay -t raw -c ${CHANNELS} -f S16_LE -r ${SAMPLERATE} ${QUEUE_FILE} \
		&> ${QUEUE_FILE}.log &

	echo "Press <q> to exit, <space> to pause/play"

	eval ${PLAYER} ${PLAYER_OPTIONS} ${file} >/dev/null 2>&1
}


#
#  MAIN ROUTINE
#

main() {
	#
	# Main program subroutine.
	#
	parse_args "$@"
	make_queue queue=${QUEUE_FILE}
	play file=${@: -1}  # filename is last argument

	exit 0
}

main "$@"
